# Root directory layout and configuration
next.config.mjs # Next.js configuration file
package.json # Project dependencies and scripts
tsconfig.json # TypeScript configuration
postcss.config.mjs # PostCSS configuration (often for TailwindCSS)
tailwind.config.ts # Tailwind CSS configuration
README.md # Project overview and instructions
.gitignore # Specifies intentionally untracked files that Git should ignore
.eslintrc.json # ESLint configuration for code linting
.cursor-architecture # Defines the project's architectural rules and guidelines
.cursor-directory # This file: describes the directory structure
.cursorrules # Custom instructions for the AI assistant

# Application source code
app/ # Main application directory following Next.js App Router structure
  layout.tsx # Root layout for the application
  page.tsx # Landing/Home page
  new/
    page.tsx # Page for uploading a new report
  sample/
    page.tsx # Page displaying a sample report visualization
  api/
    report-upload/
      signed-url/
        route.ts # API endpoint to generate pre-signed S3 URLs for report uploads
      create-record/
        route.ts # API endpoint to create the report record in DB after successful uploads
  globals.css # Global CSS styles

# Public assets
public/ # Static assets served directly
  next.svg # Next.js logo
  vercel.svg # Vercel logo

# Library code (low-level, foundational)
lib/ # Contains utility functions, external service integrations etc.
  db.ts # MongoDB connection utility (connect, disconnect, isConnected)
  models/ # Database schemas (Mongoose Models)
    Report.ts # Mongoose schema and model definition for medical reports

# Shared code (reusable across features/entities, no business logic)
shared/ # Reusable components, hooks, types, constants etc.
  # Example: components/ui/ (UI primitives like Button, Input)
  # Example: hooks/ (generic React hooks)
  # Example: lib/ or utils/ (generic helper functions)
  components/
    layout/
      Header.tsx # Common site header component with logo, navigation, and auth controls
    ui/
      button.tsx # Standard button component
    app-sidebar.tsx: The main application sidebar component, displaying navigation and reports
    nav-documents.tsx: Component specifically for displaying a list of document/report links
    nav-secondary.tsx: Component for secondary navigation items
    nav-user.tsx: Component displaying user information or actions in the sidebar footer
    ui: Atomic UI kit components (e.g., Sidebar primitives)
      sidebar.tsx: Primitives for building the sidebar structure

# Feature-specific modules
features/ # Contains self-contained feature modules
  # Example: auth/ (authentication feature)
  # Example: product-search/

# Core business entity modules
entities/ # Represents core business entities
  # Example: user/
  # Example: product/
  report: Represents the medical report entity
    api: Holds API-related logic for reports (fetching, mutations)
      queries.ts: Functions for querying report data (e.g., fetching reports for the sidebar)

# Added features directory
features/report-upload # Contains self-contained modules for specific business features (e.g., auth, report-upload)
  # Example: components/ (UI components specific to the report upload feature)

# Added report-upload feature directory
features/report-upload/components # UI components specific to the report upload feature
  FileUploadCard.tsx # Client component handling file selection, drag-and-drop, and upload progress display
